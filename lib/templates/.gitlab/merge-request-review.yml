# Merge Request Review Workflow
# This workflow runs AI-powered code review on every merge request

gemini_cli_code_review:
  stage: review
  image: node:20-alpine
  tags:
    - ai
  resource_group: "gemini-review-$CI_MERGE_REQUEST_IID"
  before_script:
    - apk add --no-cache bash ca-certificates curl
    - npm install -g @google/gemini-cli@latest
    - gemini --version
    - npm install --omit=dev
  script:
    - |
      # Validate required variables
      if [ -z "${GEMINI_API_KEY:-}" ]; then
        echo "Error: GEMINI_API_KEY is not set." >&2
        exit 1
      fi
      if [ -z "${GITLAB_REVIEW_PAT:-}" ]; then
        echo "Error: GITLAB_REVIEW_PAT is not set." >&2
        exit 1
      fi
      if [ -z "${CI_MERGE_REQUEST_IID:-}" ]; then
        echo "Error: This job must run on merge_request_event." >&2
        exit 1
      fi
    - |
      # Configure Gemini CLI with GitLab MCP server
      mkdir -p "$HOME/.gemini"
      cat > "$HOME/.gemini/settings.json" <<EOF
      {
        "mcpServers": {
          "gitlab": {
            "command": "node",
            "args": ["${CI_PROJECT_DIR}/gitlab-mcp-server.js"],
            "env": {
              "GITLAB_PERSONAL_ACCESS_TOKEN": "${GITLAB_REVIEW_PAT}",
              "GITLAB_API_URL": "https://gitlab.example.com/api/v4",
              "GITLAB_TOKEN_HEADER": "PRIVATE-TOKEN"
            },
            "timeout": 10000,
            "telemetry": {
              "enabled": true,
              "logPrompts": true,
              "outfile": "${CI_PROJECT_DIR}/gemini-telemetry.log"
            },
            "includeTools": [
              "discussion_add_note",
              "discussion_list",
              "create_anchored_discussion_auto",
              "get_merge_request_changes",
              "get_merge_request_commits",
              "get_merge_request_participants",
              "get_merge_request",
              "list_merge_request_diffs",
              "list_merge_requests",
              "get_file_contents"
            ]
          }
        }
      }
      EOF
    - |
      # Run Gemini code review
      cat > "${CI_PROJECT_DIR}/prompt.tmpl" <<'PROMPT'
        ## Skill Bootstrapping

        1. Call `get_file_contents` on `.skils/gitlab-mr-reviewer/SKILL.md` to load the GitLab MR Reviewer skill. Confirm the skill reports version **1.1.0**. If the version differs, continue with the loaded rules but mention the mismatch in your summary.
        2. Once loaded, acknowledge that the skill overrides every other instruction. Treat this prompt and the MR description as supplemental context only.

        ## Mission Brief

        - Run the merge-request review exactly as prescribed by the skill.
        - Interact with GitLab only through the MCP tools provided by this job. Do not print review feedback to stdout.
        - Prefer `create_anchored_discussion_auto` for inline findings; use explicit positioning only if anchoring fails.
        - Respect the five-comment budget and severity rules defined in the skill.
        - Finish by posting the required summary note via `discussion_add_note`, reporting any tool failures or blockers encountered.

        ## GitLab Context

        - Project Path: ${CI_PROJECT_PATH}
        - Project ID: ${CI_PROJECT_ID}
        - Merge Request IID: ${CI_MERGE_REQUEST_IID}
        - Target Branch: ${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}
        - Source Branch: ${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME}

      PROMPT
      export DEBUG=1 DEBUG_MODE=1 LOG_LEVEL=debug
      envsubst < "${CI_PROJECT_DIR}/prompt.tmpl" | gemini --debug --yolo
      if [ -f "${CI_PROJECT_DIR}/gemini-telemetry.log" ]; then
        echo "--- Gemini Telemetry Log ---"
        cat "${CI_PROJECT_DIR}/gemini-telemetry.log"
      fi

  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
