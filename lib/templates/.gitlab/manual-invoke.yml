# Manual Invoke Workflow
# On-demand Gemini AI execution with custom prompts

gemini_cli_manual_invoke:
  stage: dispatch
  image: node:20-alpine
  tags:
    - ai
  before_script:
    - apk add --no-cache bash ca-certificates curl gettext
    - npm install -g @google/gemini-cli@latest
    - gemini --version
    - npm install --omit=dev
  script:
    - rm -f "${CI_PROJECT_DIR}/gemini-telemetry.log"
    - |
      # Validate required variables
      if [ -z "${GEMINI_API_KEY:-}" ]; then
        echo "Error: GEMINI_API_KEY is not set." >&2
        exit 1
      fi
      if [ -z "${GITLAB_REVIEW_PAT:-}" ]; then
        echo "Error: GITLAB_REVIEW_PAT is not set." >&2
        exit 1
      fi
    - |
      # Configure Gemini CLI with GitLab MCP server
      mkdir -p "$HOME/.gemini"
      cat > "$HOME/.gemini/settings.json" <<EOF
      {
        "mcpServers": {
          "gitlab": {
            "command": "node",
            "args": ["${CI_PROJECT_DIR}/gitlab-mcp-server.js"],
            "env": {
              "GITLAB_PERSONAL_ACCESS_TOKEN": "${GITLAB_REVIEW_PAT}",
              "GITLAB_API_URL": "https://gitlab.example.com/api/v4",
              "GITLAB_TOKEN_HEADER": "PRIVATE-TOKEN"
            },
            "timeout": 10000,
            "telemetry": {
              "enabled": true,
              "logPrompts": true,
              "outfile": "${CI_PROJECT_DIR}/gemini-telemetry.log"
            }
          }
        }
      }
      EOF
    - |
      # Run custom prompt or default help
      if [ -n "${CUSTOM_PROMPT:-}" ]; then
        echo "Running custom prompt: ${CUSTOM_PROMPT}"
        export DEBUG=1 DEBUG_MODE=1 LOG_LEVEL=debug
        echo "${CUSTOM_PROMPT}" | gemini --debug --yolo
        if [ -f "${CI_PROJECT_DIR}/gemini-telemetry.log" ]; then
          echo "--- Gemini Telemetry Log ---"
          cat "${CI_PROJECT_DIR}/gemini-telemetry.log"
        fi
      else
        echo "No CUSTOM_PROMPT provided. Running default help."
        cat > "${CI_PROJECT_DIR}/manual-help.tmpl" <<'PROMPT'
        ## Manual Invoke Help

        You are an AI assistant with access to GitLab MCP tools for project: ${CI_PROJECT_PATH}

        Available MCP tool categories:
        - Merge Requests: get_merge_request, list_merge_requests, get_merge_request_changes, get_merge_request_commits, list_merge_request_diffs, get_merge_request_participants
        - Discussions: discussion_add_note, discussion_list, create_anchored_discussion_auto, create_mr_discussion_with_position, update_note
        - Files: get_file_contents, create_or_update_file
        - Pipelines: get_pipeline, list_pipelines, get_pipeline_jobs, get_merge_request_pipelines, retry_pipeline, cancel_pipeline, trigger_pipeline, get_job_log
        - Issues: get_issue

        To use this job with a custom prompt, set the CUSTOM_PROMPT CI/CD variable when triggering manually.

        When you are asked to review a merge request, begin by loading the `.skils/gitlab-mr-reviewer/SKILL.md` file via `get_file_contents`, confirm its version, and follow its directives exactly. That skill is authoritative for CI reviews.

        Example custom prompts:
        - "List all open merge requests and summarize their status"
        - "Audit the latest pipeline failure and explain the root cause"
        - "Load the MR reviewer skill and perform a spot-check on MR !${CI_MERGE_REQUEST_IID:-N/A}"
        - "Get the contents of README.md and suggest improvements"

        Project Context:
        - Project ID: ${CI_PROJECT_ID}
        - Project Path: ${CI_PROJECT_PATH}
        - Default Branch: ${CI_DEFAULT_BRANCH}

        Please acknowledge that you understand these tools and are ready for a custom task.
        PROMPT
        export DEBUG=1 DEBUG_MODE=1 LOG_LEVEL=debug
        envsubst < "${CI_PROJECT_DIR}/manual-help.tmpl" | gemini --debug --yolo
        if [ -f "${CI_PROJECT_DIR}/gemini-telemetry.log" ]; then
          echo "--- Gemini Telemetry Log ---"
          cat "${CI_PROJECT_DIR}/gemini-telemetry.log"
        fi
      fi

  rules:
    - when: manual
      allow_failure: true

  # Allow users to set custom variables when triggering manually
  variables:
    CUSTOM_PROMPT: ""
