# Issue Triage Workflows
# Automated and scheduled issue labeling using Gemini AI

# Job 1: Triage individual issues when they are created
gemini_cli_issue_triage:
  stage: triage
  image: node:20-alpine
  tags:
    - ai
  before_script:
    - apk add --no-cache bash ca-certificates curl
    - npm install -g @google/gemini-cli@latest
    - gemini --version
    - npm install --omit=dev
  script:
    - rm -f "${CI_PROJECT_DIR}/gemini-telemetry.log"
    - |
      # Validate required variables
      if [ -z "${GEMINI_API_KEY:-}" ]; then
        echo "Error: GEMINI_API_KEY is not set." >&2
        exit 1
      fi
      if [ -z "${GITLAB_REVIEW_PAT:-}" ]; then
        echo "Error: GITLAB_REVIEW_PAT is not set." >&2
        exit 1
      fi
    - |
      # Configure Gemini CLI with GitLab MCP server
      mkdir -p "$HOME/.gemini"
      cat > "$HOME/.gemini/settings.json" <<EOF
      {
        "mcpServers": {
          "gitlab": {
            "command": "node",
            "args": ["${CI_PROJECT_DIR}/gitlab-mcp-server.js"],
            "env": {
              "GITLAB_PERSONAL_ACCESS_TOKEN": "${GITLAB_REVIEW_PAT}",
              "GITLAB_API_URL": "https://gitlab.example.com/api/v4",
              "GITLAB_TOKEN_HEADER": "PRIVATE-TOKEN"
            },
            "timeout": 10000,
            "telemetry": {
              "enabled": true,
              "logPrompts": true,
              "outfile": "${CI_PROJECT_DIR}/gemini-telemetry.log"
            },
            "includeTools": [
              "get_issue",
              "list_project_labels",
              "add_issue_labels",
              "create_issue_note"
            ]
          }
        }
      }
      EOF
    - |
      # Run Gemini issue triage
      cat > "${CI_PROJECT_DIR}/triage-prompt.tmpl" <<'PROMPT'
        ## Role

        You are an intelligent issue triage assistant operating in a GitLab CI environment. Your task is to analyze a newly created issue and suggest appropriate labels.

        ## Task

        1. Fetch the issue details using get_issue with project_id=${CI_PROJECT_ID} and issue_iid=${CI_ISSUE_IID:-1}
        2. Fetch available project labels using list_project_labels with project_id=${CI_PROJECT_ID}
        3. Analyze the issue title and description
        4. Suggest 1-3 relevant labels from the available labels
        5. Apply the labels using add_issue_labels
        6. Post a brief comment explaining the label choices using create_issue_note

        ## Guidelines

        - Only suggest labels that exist in the project
        - Consider: bug, enhancement, documentation, security, performance, ui/ux
        - Look for keywords in title/description that match label categories
        - Be conservative - only add labels you're confident about
        - Keep the comment concise (1-2 sentences)

        Project ID: ${CI_PROJECT_ID}
        Issue IID: ${CI_ISSUE_IID:-1}
      PROMPT
      export DEBUG=1 DEBUG_MODE=1 LOG_LEVEL=debug
      envsubst < "${CI_PROJECT_DIR}/triage-prompt.tmpl" | gemini --debug --yolo
      if [ -f "${CI_PROJECT_DIR}/gemini-telemetry.log" ]; then
        echo "--- Gemini Telemetry Log ---"
        cat "${CI_PROJECT_DIR}/gemini-telemetry.log"
      fi

  rules:
    # Note: GitLab doesn't have native issue event triggers in CI
    # This job can be triggered manually or via webhook integration
    - if: '$CI_PIPELINE_SOURCE == "webhook" && $CI_ISSUE_IID'
      when: on_success
    - when: manual
      allow_failure: true

# Job 2: Scheduled batch triage of untriaged issues
gemini_cli_scheduled_triage:
  stage: triage
  image: node:20-alpine
  tags:
    - ai
  before_script:
    - apk add --no-cache bash ca-certificates curl
    - npm install -g @google/gemini-cli@latest
    - gemini --version
    - npm install --omit=dev
  script:
    - rm -f "${CI_PROJECT_DIR}/gemini-telemetry.log"
    - |
      # Validate required variables
      if [ -z "${GEMINI_API_KEY:-}" ]; then
        echo "Error: GEMINI_API_KEY is not set." >&2
        exit 1
      fi
      if [ -z "${GITLAB_REVIEW_PAT:-}" ]; then
        echo "Error: GITLAB_REVIEW_PAT is not set." >&2
        exit 1
      fi
    - |
      # Configure Gemini CLI with GitLab MCP server
      mkdir -p "$HOME/.gemini"
      cat > "$HOME/.gemini/settings.json" <<EOF
      {
        "mcpServers": {
          "gitlab": {
            "command": "node",
            "args": ["${CI_PROJECT_DIR}/gitlab-mcp-server.js"],
            "env": {
              "GITLAB_PERSONAL_ACCESS_TOKEN": "${GITLAB_REVIEW_PAT}",
              "GITLAB_API_URL": "https://gitlab.example.com/api/v4",
              "GITLAB_TOKEN_HEADER": "PRIVATE-TOKEN"
            },
            "timeout": 10000,
            "telemetry": {
              "enabled": true,
              "logPrompts": true,
              "outfile": "${CI_PROJECT_DIR}/gemini-telemetry.log"
            },
            "includeTools": [
              "list_issues",
              "get_issue",
              "list_project_labels",
              "add_issue_labels",
              "create_issue_note"
            ]
          }
        }
      }
      EOF
    - |
      # Run batch triage
      cat > "${CI_PROJECT_DIR}/batch-triage-prompt.tmpl" <<'PROMPT'
        ## Role

        You are performing scheduled batch triage of unlabeled issues in a GitLab project.

        ## Task

        1. Fetch all open issues without labels using list_issues with:
           - project_id=${CI_PROJECT_ID}
           - state=opened
           - labels=None (or filter for issues with no labels)
        2. Fetch available project labels using list_project_labels
        3. For each unlabeled issue (limit to 10 per run):
           a. Fetch full details with get_issue
           b. Analyze title and description
           c. Suggest 1-3 relevant labels
           d. Apply labels with add_issue_labels
           e. Post brief explanation with create_issue_note
        4. Provide a summary of issues processed

        ## Guidelines

        - Process maximum 10 issues per run to avoid timeout
        - Only use labels that exist in the project
        - Be consistent with label application across similar issues
        - Skip issues that are genuinely unclear

        Project ID: ${CI_PROJECT_ID}
      PROMPT
      export DEBUG=1 DEBUG_MODE=1 LOG_LEVEL=debug
      envsubst < "${CI_PROJECT_DIR}/batch-triage-prompt.tmpl" | gemini --debug --yolo
      if [ -f "${CI_PROJECT_DIR}/gemini-telemetry.log" ]; then
        echo "--- Gemini Telemetry Log ---"
        cat "${CI_PROJECT_DIR}/gemini-telemetry.log"
      fi

  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
