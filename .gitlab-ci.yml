stages: [ai_review]

ai-gemini-review:
  stage: ai_review
  tags: [ai]
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  script: |
    set -euo pipefail
    export PATH="/opt/homebrew/bin:/usr/local/bin:$PATH"

    # Sanity: secrets present
    test -n "$GITLAB_REVIEW_PAT" || { echo "GITLAB_REVIEW_PAT missing"; exit 1; }
    test -n "$GEMINI_API_KEY"    || { echo "GEMINI_API_KEY missing"; exit 1; }

    # Make sure Node + Gemini CLI exist
    command -v npm >/dev/null 2>&1 || (brew update && brew install -q node)
    npm install -g @google/gemini-cli
    gemini --version

    # Write Gemini settings to use Dockerized MCP GitLab server
    mkdir -p "$HOME/.gemini"
    cat > "$HOME/.gemini/settings.json" <<'JSON'
    {
      "mcpServers": {
        "gitlab": {
          "command": "docker",
          "args": [
            "run", "--rm", "-i",
            "-e", "GITLAB_PERSONAL_ACCESS_TOKEN",
            "-e", "GITLAB_API_URL",
            "mcp/gitlab"
          ],
          "env": {
            "GITLAB_PERSONAL_ACCESS_TOKEN": "${GITLAB_REVIEW_PAT}",
            "GITLAB_API_URL": "https://hs2git.ab-games.com/api/v4"
          },
          "includeTools": [
            "get_merge_request",
            "get_merge_request_changes",
            "get_merge_request_commits",
            "discussion_add_note",
            "discussion_list"
          ],
          "timeout": 60000
        }
      }
    }
    JSON

    # Quick auth ping (fails fast if GEMINI_API_KEY is wrong)
    gemini --yolo --prompt "Say: OK" | grep -q "OK"

    # Real review
    gemini --yolo <<'PROMPT'
    You are a senior reviewer for a Unity/C# project.
    1) Use the GitLab MCP tools to read THIS MRâ€™s changes and intent.
    2) Post ONE concise summary comment with the top risks (correctness, performance, security, CI/Unity pitfalls).
    3) Post ONE suggestions comment with safe GitLab suggestions.
    PROMPT