stages:
  - review

gemini_cli_code_review:
  stage: review
  image: node:20-alpine
  variables:
    GEMINI_CLI_VERSION: "0.2.2"
  before_script:
    - set -euo pipefail
    - echo "Detecting runner OS…"
    - OS=$(uname -s); echo "OS=${OS}"
    - |
      if [ "${OS}" = "Darwin" ]; then
        echo "Shell runner on macOS detected. Ensuring prerequisites via Homebrew…"
        if ! command -v node >/dev/null 2>&1; then
          if command -v brew >/dev/null 2>&1; then
            brew install node@20 || brew install node || true
          else
            echo "Node.js not found. Please install Node 20+ on the runner host." >&2
            exit 1
          fi
        fi
        npm --version || true
        echo "Installing pinned Gemini CLI ${GEMINI_CLI_VERSION}…"
        npm install -g @google/gemini-cli@"${GEMINI_CLI_VERSION}"
        gemini --version || true
        npm install --omit=dev
        npm ls @modelcontextprotocol/sdk || true
      else
        echo "Linux or containerized runner detected. Installing system deps…"
        if command -v apk >/dev/null 2>&1; then
          apk add --no-cache bash ca-certificates curl
        elif command -v apt-get >/dev/null 2>&1; then
          apt-get update && apt-get install -y ca-certificates curl bash && rm -rf /var/lib/apt/lists/*
        fi
        echo "Installing pinned Gemini CLI ${GEMINI_CLI_VERSION}…"
        npm install -g @google/gemini-cli@"${GEMINI_CLI_VERSION}"
        gemini --version || true
        npm install --omit=dev
        npm ls @modelcontextprotocol/sdk || true
      fi
  script:
    - echo "Starting the Gemini CLI job..."
    - |
      if [ -z "${GEMINI_API_KEY:-}" ]; then
        echo "Error: 'GEMINI_API_KEY' is not set." >&2
        exit 1
      fi
      if [ -z "${GITLAB_REVIEW_PAT:-}" ]; then
        echo "Error: 'GITLAB_REVIEW_PAT' is not set." >&2
        exit 1
      fi
      if [ -z "${CI_MERGE_REQUEST_IID:-}" ]; then
        echo "Error: This job must run on merge_request_event (no MR IID)." >&2
        exit 1
      fi
    - |
      set -euo pipefail
      echo "Verifying Gemini CLI availability…"
      if ! command -v gemini >/dev/null 2>&1; then
        echo "Gemini CLI not found in PATH. Ensure your runner image provides 'gemini'." >&2
        exit 1
      fi
      gemini --version || true
    - |
      echo "Writing Gemini CLI settings for in-repo GitLab MCP…"
      mkdir -p "$HOME/.gemini"
      cat > "$HOME/.gemini/settings.json" <<EOF
      {
        "mcpServers": {
          "gitlab": {
            "command": "node",
            "args": ["${CI_PROJECT_DIR}/gitlab-mcp-server.js"],
            "env": {
              "GITLAB_PERSONAL_ACCESS_TOKEN": "${GITLAB_REVIEW_PAT}",
              "GITLAB_API_URL": "https://hs2git.ab-games.com/api/v4",
              "GITLAB_TOKEN_HEADER": "PRIVATE-TOKEN"
            },
            "timeout": 10000,
            "includeTools": [
              "discussion_add_note",
              "discussion_list",
              "create_mr_discussion_with_position",
              "get_merge_request_changes",
              "get_merge_request_commits",
              "get_merge_request_participants",
              "get_merge_request",
              "list_merge_request_diffs",
              "list_merge_requests",
              "get_file_contents",
              "create_or_update_file"
            ]
          }
        }
      }
      EOF
    - |
      echo "Performing Code Review with Gemini"
      gemini --debug --yolo <<EOF
        Role: You are an automated GitLab code review assistant. Provide concise, actionable feedback tied to the current merge request.

        Context:
        - Repository: ${CI_PROJECT_PATH}
        - Project URL: ${CI_MERGE_REQUEST_PROJECT_URL}
        - Project ID: ${CI_PROJECT_ID}
        - MR IID: ${CI_MERGE_REQUEST_IID}
        - Commit SHA: ${CI_COMMIT_SHA}
        - Source Branch: ${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME}
        - Target Branch: ${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}

        MR_CONTEXT (JSON):
        {"project_id":"${CI_PROJECT_ID}","project_path":"${CI_PROJECT_PATH}","mr_iid":"${CI_MERGE_REQUEST_IID}","commit_sha":"${CI_COMMIT_SHA}","source_branch":"${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME}","target_branch":"${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}"}

        Rules & Constraints:
        - Always use MR_CONTEXT values exactly for MCP tool parameters (no guessing).
        - First, validate access by calling get_merge_request with project_id and mr_iid from MR_CONTEXT. If it fails, post a single top-level diagnostic note via discussion_add_note and exit.
        - Fetch MR commits, changes, and diffs using get_merge_request_commits, get_merge_request_changes, and list_merge_request_diffs.
        - Post exactly one new MR comment per run:
          - Preferred: create an anchored discussion using create_mr_discussion_with_position with a valid position object derived from MR diff_refs (base_sha, start_sha, head_sha) and a changed file/line.
          - Fallback: if anchoring is not possible, post one top-level note via discussion_add_note. Do not update or edit prior comments.
        - Keep output brief: a 1-paragraph summary and 3–6 prioritized suggestions with short rationale; quote code when relevant.
        - Treat tool errors as fatal; do not claim success if posting fails.

        Output:
        - A single MR comment (anchored discussion preferred) containing:
          - Summary: short description of the proposed change
          - Suggestions: prioritized, actionable bullets (2–6) with brief rationale
      EOF

  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
