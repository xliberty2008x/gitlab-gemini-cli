stages:
  - review

gemini_cli_code_review:
  stage: review
  
  # Use the official Gemini CLI sandbox image
  image: us-docker.pkg.dev/gemini-code-dev/gemini-cli/sandbox:0.1.11

  script:
    - echo "Starting the Gemini CLI job..."
    
    - |
      echo "Using API KEY Authentication"
      if [ -z "$GEMINI_API_KEY" ]; then
        echo "Error: The 'GEMINI_API_KEY' CI/CD variable is not set."
        echo "Please configure it in your project's Settings > CI/CD > Variables."
        exit 1
      fi
      
    - |
      echo "Installing MCP server dependencies..."
      npm install
      
    - |
      echo "Writing Gemini CLI settings with enhanced MCP server..."
      mkdir -p "$HOME/.gemini"
      cat <<EOF > "$HOME/.gemini/settings.json"
      {
        "coreTools": ["LSTool", "ReadFileTool", "GrepTool", "GlobTool", "ReadManyFilesTool"],
        "mcpServers": {
          "gitlab": {
            "command": "node",
            "args": ["${CI_PROJECT_DIR}/gitlab-mcp-server.js"],
            "env": {
              "GITLAB_PERSONAL_ACCESS_TOKEN": "${CI_JOB_TOKEN}"
            },
            "timeout": 5000,
            "includeTools": [
              "discussion_add_note", 
              "discussion_list",
              "get_merge_request_changes",
              "get_merge_request_commits",
              "get_merge_request_participants",
              "get_merge_request",
              "get_file_contents",
              "list_merge_request_diffs",
              "list_merge_requests",
              "create_or_update_file",
              "create_merge_request",
              "get_issue",
              "get_pipeline_jobs",
              "get_merge_request_pipelines",
              "get_pipeline",
              "list_pipelines",
              "get_job_log",
              "retry_pipeline",
              "cancel_pipeline",
              "trigger_pipeline"
            ]
          }
        }
      }
      EOF
      
    - |
      echo "Performing Code Review with Gemini"
      # This runs in "yolo mode" because the pipeline runs non-interactively
      gemini --yolo <<EOF
        Provide a consistent and thorough code review in Gitlab project ${CI_MERGE_REQUEST_PROJECT_URL} for the merge request ${CI_MERGE_REQUEST_IID}
        Consider all the collaborator comments in the MR that explain the code.

        Steps:
        1. Add a comment to the MR with a concise summary of proposed change. Skip this if nothing has changed since you last provided a summary.
        2. Add a comment to the MR with a prioritized list of suggestions and quoting the current code when possible. Reference your previous merge request comments if applicable.
      EOF
      
    - |
      echo "Run at $(date)" > ai_review_report.md

  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    
  artifacts:
    when: always
    paths: [ai_review_report.md]
    
  allow_failure: true
